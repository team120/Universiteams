name: Universiteams CD

on:
  push:
    branches:
      - main
      - continuous-delivery
    tags:
      - 'v*.*.*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://api.universiteams.com
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build image to be cached
        uses: docker/build-push-action@v2
        with:
          context: .
          target: base
          push: false
          load: true
          tags: universiteams/api:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      # Temp fix to avoid maintaining old cache data
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Renew cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: 'Create production .env file'
        run: |
          chmod +x ./create-env-file.sh
          ./create-env-file.sh POSTGRES_USER=${{secrets.POSTGRES_USER}} POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} ACCESS_TOKEN_SECRET=${{secrets.ACCESS_TOKEN_SECRET}} REFRESH_TOKEN_SECRET=${{secrets.REFRESH_TOKEN_SECRET}} EMAIL_VERIFICATION_LINK_SECRET=${{secrets.EMAIL_VERIFICATION_LINK_SECRET}} FORGET_PASSWORD_VERIFICATION_LINK_SECRET=${{secrets.FORGET_PASSWORD_VERIFICATION_LINK_SECRET}} EMAIL_USER=${{secrets.EMAIL_USER}} SENDGRID_API_KEY=${{secrets.SENDGRID_API_KEY}} SENDINBLUE_API_KEY=${{secrets.SENDINBLUE_API_KEY}}
      ## TODO: execute this by ssh in do server
      - name: 'Bootstrap prod dependencies'
        run: |
          docker-compose -p prod -f docker-compose.prod.yml up --detach --remove-orphans